{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nvar CLASS_PREFIX = \".\";\nvar NAMESPACE_PREFIX = \"@\";\nvar CONSTANTS_PREFIX = \"$\";\nvar NAMESPACE_REGEX = new RegExp(\"@[^\" + CLASS_PREFIX + CONSTANTS_PREFIX + \"]+\");\nexport var isNamespace = function isNamespace(path) {\n  return path.startsWith(NAMESPACE_PREFIX);\n};\nexport var getKeyFromNamespace = function getKeyFromNamespace(path) {\n  return path.replace(NAMESPACE_REGEX, \"\");\n};\nexport var getKey = function getKey(path) {\n  return path.substring(1);\n};\nexport var getNamespace = function getNamespace(path) {\n  return path.match(NAMESPACE_REGEX)[0].substring(1);\n};\nexport var isClassName = function isClassName(path) {\n  return getKeyFromNamespace(path).startsWith(CLASS_PREFIX);\n};\nexport var isConstant = function isConstant(path) {\n  return getKeyFromNamespace(path).startsWith(CONSTANTS_PREFIX);\n};\nexport var StyleSheetNoop = {\n  flatten: function flatten(styles) {\n    return styles;\n  },\n  create: function create(styles) {\n    return styles;\n  }\n};\nexport var isFalseyString = function isFalseyString(value) {\n  try {\n    return value === \"undefined\" || !JSON.parse(value);\n  } catch (_) {\n    return false;\n  }\n};\nexport var flattenStyles = function flattenStyles(styles) {\n  return styles.reduce(function (flattenStyles, style) {\n    return _extends(flattenStyles, style);\n  }, Object.create(null));\n};\nexport var getPathFromLiteralTag = function getPathFromLiteralTag(strings, expressions) {\n  return strings.reduce(function (result, currentString, i) {\n    return \"\" + result + currentString + (expressions[i] ? expressions[i] : \"\");\n  }, \"\");\n};","map":{"version":3,"sources":["/Users/agustin/projects/react-native-to-do-list/node_modules/react-native-use-styles/src/core/utils.js"],"names":["CLASS_PREFIX","NAMESPACE_PREFIX","CONSTANTS_PREFIX","NAMESPACE_REGEX","RegExp","isNamespace","path","startsWith","getKeyFromNamespace","replace","getKey","substring","getNamespace","match","isClassName","isConstant","StyleSheetNoop","flatten","styles","create","isFalseyString","value","JSON","parse","_","flattenStyles","reduce","style","Object","getPathFromLiteralTag","strings","expressions","result","currentString","i"],"mappings":";AAAA,IAAMA,YAAY,GAAG,GAArB;AACA,IAAMC,gBAAgB,GAAG,GAAzB;AACA,IAAMC,gBAAgB,GAAG,GAAzB;AACA,IAAMC,eAAe,GAAG,IAAIC,MAAJ,SAAiBJ,YAAjB,GAAgCE,gBAAhC,QAAxB;AAEA,OAAO,IAAMG,WAAW,GAAG,SAAdA,WAAc,CAAAC,IAAI;AAAA,SAAIA,IAAI,CAACC,UAAL,CAAgBN,gBAAhB,CAAJ;AAAA,CAAxB;AAEP,OAAO,IAAMO,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAF,IAAI;AAAA,SAAIA,IAAI,CAACG,OAAL,CAAaN,eAAb,EAA8B,EAA9B,CAAJ;AAAA,CAAhC;AAEP,OAAO,IAAMO,MAAM,GAAG,SAATA,MAAS,CAAAJ,IAAI;AAAA,SAAIA,IAAI,CAACK,SAAL,CAAe,CAAf,CAAJ;AAAA,CAAnB;AAEP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAN,IAAI;AAAA,SAAIA,IAAI,CAACO,KAAL,CAAWV,eAAX,EAA4B,CAA5B,EAA+BQ,SAA/B,CAAyC,CAAzC,CAAJ;AAAA,CAAzB;AAEP,OAAO,IAAMG,WAAW,GAAG,SAAdA,WAAc,CAAAR,IAAI;AAAA,SAC7BE,mBAAmB,CAACF,IAAD,CAAnB,CAA0BC,UAA1B,CAAqCP,YAArC,CAD6B;AAAA,CAAxB;AAGP,OAAO,IAAMe,UAAU,GAAG,SAAbA,UAAa,CAAAT,IAAI;AAAA,SAC5BE,mBAAmB,CAACF,IAAD,CAAnB,CAA0BC,UAA1B,CAAqCL,gBAArC,CAD4B;AAAA,CAAvB;AAGP,OAAO,IAAMc,cAAc,GAAG;AAC5BC,EAAAA,OAAO,EAAE,iBAAAC,MAAM;AAAA,WAAIA,MAAJ;AAAA,GADa;AAE5BC,EAAAA,MAAM,EAAE,gBAAAD,MAAM;AAAA,WAAIA,MAAJ;AAAA;AAFc,CAAvB;AAKP,OAAO,IAAME,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,KAAK,EAAI;AACrC,MAAI;AACF,WAAOA,KAAK,KAAK,WAAV,IAAyB,CAACC,IAAI,CAACC,KAAL,CAAWF,KAAX,CAAjC;AACD,GAFD,CAEE,OAAOG,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACF,CANM;AAQP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAP,MAAM;AAAA,SACjCA,MAAM,CAACQ,MAAP,CACE,UAACD,aAAD,EAAgBE,KAAhB;AAAA,WAA0B,SAAcF,aAAd,EAA6BE,KAA7B,CAA1B;AAAA,GADF,EAEEC,MAAM,CAACT,MAAP,CAAc,IAAd,CAFF,CADiC;AAAA,CAA5B;AAMP,OAAO,IAAMU,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,OAAD,EAAUC,WAAV;AAAA,SACnCD,OAAO,CAACJ,MAAR,CACE,UAACM,MAAD,EAASC,aAAT,EAAwBC,CAAxB;AAAA,gBACKF,MADL,GACcC,aADd,IAC8BF,WAAW,CAACG,CAAD,CAAX,GAAiBH,WAAW,CAACG,CAAD,CAA5B,GAAkC,EADhE;AAAA,GADF,EAGE,EAHF,CADmC;AAAA,CAA9B","sourcesContent":["const CLASS_PREFIX = \".\";\nconst NAMESPACE_PREFIX = \"@\";\nconst CONSTANTS_PREFIX = \"$\";\nconst NAMESPACE_REGEX = new RegExp(`@[^${CLASS_PREFIX}${CONSTANTS_PREFIX}]+`);\n\nexport const isNamespace = path => path.startsWith(NAMESPACE_PREFIX);\n\nexport const getKeyFromNamespace = path => path.replace(NAMESPACE_REGEX, \"\");\n\nexport const getKey = path => path.substring(1);\n\nexport const getNamespace = path => path.match(NAMESPACE_REGEX)[0].substring(1);\n\nexport const isClassName = path =>\n  getKeyFromNamespace(path).startsWith(CLASS_PREFIX);\n\nexport const isConstant = path =>\n  getKeyFromNamespace(path).startsWith(CONSTANTS_PREFIX);\n\nexport const StyleSheetNoop = {\n  flatten: styles => styles,\n  create: styles => styles\n};\n\nexport const isFalseyString = value => {\n  try {\n    return value === \"undefined\" || !JSON.parse(value);\n  } catch (_) {\n    return false;\n  }\n};\n\nexport const flattenStyles = styles =>\n  styles.reduce(\n    (flattenStyles, style) => Object.assign(flattenStyles, style),\n    Object.create(null)\n  );\n\nexport const getPathFromLiteralTag = (strings, expressions) =>\n  strings.reduce(\n    (result, currentString, i) =>\n      `${result}${currentString}${expressions[i] ? expressions[i] : \"\"}`,\n    \"\"\n  );\n"]},"metadata":{},"sourceType":"module"}