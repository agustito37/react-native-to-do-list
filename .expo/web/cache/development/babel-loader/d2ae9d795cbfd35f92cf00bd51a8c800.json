{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport stylesDictionary from \"./stylesDictionary\";\nimport aliasesDictionary from \"./aliasesDictionary\";\nimport { isConstant } from \"./utils\";\nexport var separator = \":\";\n\nvar getKeyFromParts = function getKeyFromParts(node, parts, pos) {\n  var currentPart = parts[pos];\n  currentPart = aliasesDictionary[currentPart] || currentPart;\n  return node[currentPart];\n};\n\nvar getValueFromParts = function getValueFromParts(parts, pos, getConstant) {\n  var newPos = pos;\n  var value = \"\";\n\n  while (newPos < parts.length) {\n    var newValue = parts[newPos];\n\n    if (isConstant(newValue)) {\n      newValue = getConstant(newValue);\n    } else {\n      newValue = aliasesDictionary[newValue] || newValue;\n    }\n\n    value += \" \" + newValue;\n    newPos += 1;\n  }\n\n  value = value.substring(1);\n\n  if (value.indexOf(\" \") === -1) {\n    value = parseFloat(value) || value;\n  }\n\n  return [value, newPos];\n};\n\nexport default (function (path, getConstant) {\n  var style = Object.create(null);\n  var parts = path.split(separator);\n  var currentNode = getKeyFromParts(stylesDictionary, parts, 0);\n  var pos = 1;\n\n  while (pos < parts.length) {\n    var lastNode = currentNode;\n    currentNode = getKeyFromParts(currentNode, parts, pos);\n\n    if (!currentNode) {\n      var _getValueFromParts = getValueFromParts(parts, pos, getConstant),\n          _getValueFromParts2 = _slicedToArray(_getValueFromParts, 2),\n          value = _getValueFromParts2[0],\n          newPos = _getValueFromParts2[1];\n\n      pos = newPos;\n\n      _extends(style, _defineProperty({}, lastNode.__propName, value));\n    }\n\n    pos += 1;\n  }\n\n  return style;\n});\nexport var setSeparator = function setSeparator(sp) {\n  separator = sp;\n};","map":{"version":3,"sources":["/Users/agustin/projects/react-native-to-do-list/node_modules/react-native-use-styles/src/core/pathTransform.js"],"names":["stylesDictionary","aliasesDictionary","isConstant","separator","getKeyFromParts","node","parts","pos","currentPart","getValueFromParts","getConstant","newPos","value","length","newValue","substring","indexOf","parseFloat","path","style","Object","create","split","currentNode","lastNode","__propName","setSeparator","sp"],"mappings":";;;AAAA,OAAOA,gBAAP;AACA,OAAOC,iBAAP;AACA,SAASC,UAAT;AAEA,OAAO,IAAIC,SAAS,GAAG,GAAhB;;AAEP,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,IAAD,EAAOC,KAAP,EAAcC,GAAd,EAAsB;AAC5C,MAAIC,WAAW,GAAGF,KAAK,CAACC,GAAD,CAAvB;AACAC,EAAAA,WAAW,GAAGP,iBAAiB,CAACO,WAAD,CAAjB,IAAkCA,WAAhD;AAEA,SAAOH,IAAI,CAACG,WAAD,CAAX;AACD,CALD;;AAOA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACH,KAAD,EAAQC,GAAR,EAAaG,WAAb,EAA6B;AACrD,MAAIC,MAAM,GAAGJ,GAAb;AACA,MAAIK,KAAK,GAAG,EAAZ;;AAEA,SAAOD,MAAM,GAAGL,KAAK,CAACO,MAAtB,EAA8B;AAC5B,QAAIC,QAAQ,GAAGR,KAAK,CAACK,MAAD,CAApB;;AAEA,QAAIT,UAAU,CAACY,QAAD,CAAd,EAA0B;AACxBA,MAAAA,QAAQ,GAAGJ,WAAW,CAACI,QAAD,CAAtB;AACD,KAFD,MAEO;AACLA,MAAAA,QAAQ,GAAGb,iBAAiB,CAACa,QAAD,CAAjB,IAA+BA,QAA1C;AACD;;AAEDF,IAAAA,KAAK,UAAQE,QAAb;AACAH,IAAAA,MAAM,IAAI,CAAV;AACD;;AACDC,EAAAA,KAAK,GAAGA,KAAK,CAACG,SAAN,CAAgB,CAAhB,CAAR;;AACA,MAAIH,KAAK,CAACI,OAAN,CAAc,GAAd,MAAuB,CAAC,CAA5B,EAA+B;AAC7BJ,IAAAA,KAAK,GAAGK,UAAU,CAACL,KAAD,CAAV,IAAqBA,KAA7B;AACD;;AAED,SAAO,CAACA,KAAD,EAAQD,MAAR,CAAP;AACD,CAtBD;;AAiCA,gBAAe,UAACO,IAAD,EAAOR,WAAP,EAAuB;AACpC,MAAIS,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAZ;AACA,MAAMf,KAAK,GAAGY,IAAI,CAACI,KAAL,CAAWnB,SAAX,CAAd;AAGA,MAAIoB,WAAW,GAAGnB,eAAe,CAACJ,gBAAD,EAAmBM,KAAnB,EAA0B,CAA1B,CAAjC;AACA,MAAIC,GAAG,GAAG,CAAV;;AACA,SAAOA,GAAG,GAAGD,KAAK,CAACO,MAAnB,EAA2B;AACzB,QAAMW,QAAQ,GAAGD,WAAjB;AACAA,IAAAA,WAAW,GAAGnB,eAAe,CAACmB,WAAD,EAAcjB,KAAd,EAAqBC,GAArB,CAA7B;;AAGA,QAAI,CAACgB,WAAL,EAAkB;AAAA,+BACQd,iBAAiB,CAACH,KAAD,EAAQC,GAAR,EAAaG,WAAb,CADzB;AAAA;AAAA,UACTE,KADS;AAAA,UACFD,MADE;;AAEhBJ,MAAAA,GAAG,GAAGI,MAAN;;AAEA,eAAcQ,KAAd,sBACGK,QAAQ,CAACC,UADZ,EACyBb,KADzB;AAGD;;AAEDL,IAAAA,GAAG,IAAI,CAAP;AACD;;AAED,SAAOY,KAAP;AACD,CAzBD;AA2BA,OAAO,IAAMO,YAAY,GAAG,SAAfA,YAAe,CAAAC,EAAE,EAAI;AAChCxB,EAAAA,SAAS,GAAGwB,EAAZ;AACD,CAFM","sourcesContent":["import stylesDictionary from \"./stylesDictionary\";\nimport aliasesDictionary from \"./aliasesDictionary\";\nimport { isConstant } from \"./utils\";\n\nexport let separator = \":\";\n\nconst getKeyFromParts = (node, parts, pos) => {\n  let currentPart = parts[pos];\n  currentPart = aliasesDictionary[currentPart] || currentPart;\n\n  return node[currentPart];\n};\n\nconst getValueFromParts = (parts, pos, getConstant) => {\n  let newPos = pos;\n  let value = \"\";\n\n  while (newPos < parts.length) {\n    let newValue = parts[newPos];\n\n    if (isConstant(newValue)) {\n      newValue = getConstant(newValue);\n    } else {\n      newValue = aliasesDictionary[newValue] || newValue;\n    }\n\n    value += ` ${newValue}`;\n    newPos += 1;\n  }\n  value = value.substring(1);\n  if (value.indexOf(\" \") === -1) {\n    value = parseFloat(value) || value;\n  }\n\n  return [value, newPos];\n};\n\n// PRECONDITION: at least one key-value pair exists in the path\n/* TODO: Use case:\n  input: \"fx:1:2:dir:row\"\n  output:\n  {\n    flex: 1 2,\n    flexDirection: row\n  }\n*/\nexport default (path, getConstant) => {\n  let style = Object.create(null);\n  const parts = path.split(separator);\n\n  // iterates until find a value, then get values until end\n  let currentNode = getKeyFromParts(stylesDictionary, parts, 0);\n  let pos = 1;\n  while (pos < parts.length) {\n    const lastNode = currentNode;\n    currentNode = getKeyFromParts(currentNode, parts, pos);\n\n    // if it's an object we need to keep digging, otherwise is undefined cause we found a value\n    if (!currentNode) {\n      const [value, newPos] = getValueFromParts(parts, pos, getConstant);\n      pos = newPos;\n\n      Object.assign(style, {\n        [lastNode.__propName]: value\n      });\n    }\n\n    pos += 1;\n  }\n\n  return style;\n};\n\nexport const setSeparator = sp => {\n  separator = sp;\n};\n"]},"metadata":{},"sourceType":"module"}