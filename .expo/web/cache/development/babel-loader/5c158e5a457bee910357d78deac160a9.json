{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nvar globalCache;\nvar GLOBAL_KEY = \"__global\";\nvar CONSTANTS_KEY = \"constants\";\nexport var clearCache = function clearCache() {\n  globalCache = Object.create(null);\n  globalCache[GLOBAL_KEY] = Object.create(null);\n};\nclearCache();\n\nvar processDefinition = function processDefinition(definition) {\n  var constants = definition.constants;\n\n  if (constants) {\n    definition.constants = null;\n  }\n\n  var styles = StyleSheet.create(definition);\n  return {\n    styles: styles,\n    constants: constants\n  };\n};\n\nexport var setInCache = function setInCache(definition, namespace) {\n  var _processDefinition = processDefinition(definition),\n      styles = _processDefinition.styles,\n      constants = _processDefinition.constants;\n\n  var cache = globalCache;\n\n  if (namespace) {\n    if (!cache[namespace]) cache[namespace] = Object.create(null);\n    cache = cache[namespace];\n  } else {\n    cache = cache[GLOBAL_KEY];\n  }\n\n  _extends(cache, StyleSheet.create(styles));\n\n  _extends(cache, {\n    constants: constants\n  });\n};\nexport var getFromCache = function getFromCache(key, namespace, definition, isConstant) {\n  var value;\n\n  if (definition) {\n    var def = definition;\n\n    if (isConstant) {\n      def = def[CONSTANTS_KEY];\n    }\n\n    if (def && def[key]) return def[key];\n  }\n\n  if (namespace && globalCache[namespace]) {\n    var cache = globalCache[namespace];\n\n    if (isConstant) {\n      cache = cache[CONSTANTS_KEY];\n    }\n\n    value = cache && cache[key];\n  }\n\n  if (!value) {\n    var _cache = globalCache[GLOBAL_KEY];\n\n    if (isConstant) {\n      _cache = _cache[CONSTANTS_KEY];\n    }\n\n    value = _cache && _cache[key];\n  }\n\n  return isConstant ? value : StyleSheet.flatten(value);\n};","map":{"version":3,"sources":["/Users/agustin/projects/react-native-to-do-list/node_modules/react-native-use-styles/src/core/globalCache.js"],"names":["globalCache","GLOBAL_KEY","CONSTANTS_KEY","clearCache","Object","create","processDefinition","definition","constants","styles","StyleSheet","setInCache","namespace","cache","getFromCache","key","isConstant","value","def","flatten"],"mappings":";;AAEA,IAAIA,WAAJ;AACA,IAAMC,UAAU,GAAG,UAAnB;AACA,IAAMC,aAAa,GAAG,WAAtB;AAEA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAC9BH,EAAAA,WAAW,GAAGI,MAAM,CAACC,MAAP,CAAc,IAAd,CAAd;AACAL,EAAAA,WAAW,CAACC,UAAD,CAAX,GAA0BG,MAAM,CAACC,MAAP,CAAc,IAAd,CAA1B;AACD,CAHM;AAIPF,UAAU;;AAEV,IAAMG,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,UAAU,EAAI;AACtC,MAAMC,SAAS,GAAGD,UAAU,CAACC,SAA7B;;AACA,MAAIA,SAAJ,EAAe;AACbD,IAAAA,UAAU,CAACC,SAAX,GAAuB,IAAvB;AACD;;AACD,MAAMC,MAAM,GAAGC,UAAU,CAACL,MAAX,CAAkBE,UAAlB,CAAf;AAEA,SAAO;AAAEE,IAAAA,MAAM,EAANA,MAAF;AAAUD,IAAAA,SAAS,EAATA;AAAV,GAAP;AACD,CARD;;AAUA,OAAO,IAAMG,UAAU,GAAG,SAAbA,UAAa,CAACJ,UAAD,EAAaK,SAAb,EAA2B;AAAA,2BACrBN,iBAAiB,CAACC,UAAD,CADI;AAAA,MAC3CE,MAD2C,sBAC3CA,MAD2C;AAAA,MACnCD,SADmC,sBACnCA,SADmC;;AAEnD,MAAIK,KAAK,GAAGb,WAAZ;;AAEA,MAAIY,SAAJ,EAAe;AACb,QAAI,CAACC,KAAK,CAACD,SAAD,CAAV,EAAuBC,KAAK,CAACD,SAAD,CAAL,GAAmBR,MAAM,CAACC,MAAP,CAAc,IAAd,CAAnB;AACvBQ,IAAAA,KAAK,GAAGA,KAAK,CAACD,SAAD,CAAb;AACD,GAHD,MAGO;AACLC,IAAAA,KAAK,GAAGA,KAAK,CAACZ,UAAD,CAAb;AACD;;AAGD,WAAcY,KAAd,EAAqBH,UAAU,CAACL,MAAX,CAAkBI,MAAlB,CAArB;;AACA,WAAcI,KAAd,EAAqB;AAAEL,IAAAA,SAAS,EAATA;AAAF,GAArB;AACD,CAdM;AAgBP,OAAO,IAAMM,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD,EAAMH,SAAN,EAAiBL,UAAjB,EAA6BS,UAA7B,EAA4C;AACtE,MAAIC,KAAJ;;AAGA,MAAIV,UAAJ,EAAgB;AACd,QAAIW,GAAG,GAAGX,UAAV;;AAEA,QAAIS,UAAJ,EAAgB;AACdE,MAAAA,GAAG,GAAGA,GAAG,CAAChB,aAAD,CAAT;AACD;;AAED,QAAIgB,GAAG,IAAIA,GAAG,CAACH,GAAD,CAAd,EAAqB,OAAOG,GAAG,CAACH,GAAD,CAAV;AACtB;;AAGD,MAAIH,SAAS,IAAIZ,WAAW,CAACY,SAAD,CAA5B,EAAyC;AACvC,QAAIC,KAAK,GAAGb,WAAW,CAACY,SAAD,CAAvB;;AAEA,QAAII,UAAJ,EAAgB;AACdH,MAAAA,KAAK,GAAGA,KAAK,CAACX,aAAD,CAAb;AACD;;AAEDe,IAAAA,KAAK,GAAGJ,KAAK,IAAIA,KAAK,CAACE,GAAD,CAAtB;AACD;;AAGD,MAAI,CAACE,KAAL,EAAY;AACV,QAAIJ,MAAK,GAAGb,WAAW,CAACC,UAAD,CAAvB;;AAEA,QAAIe,UAAJ,EAAgB;AACdH,MAAAA,MAAK,GAAGA,MAAK,CAACX,aAAD,CAAb;AACD;;AAEDe,IAAAA,KAAK,GAAGJ,MAAK,IAAIA,MAAK,CAACE,GAAD,CAAtB;AACD;;AAGD,SAAOC,UAAU,GAAGC,KAAH,GAAWP,UAAU,CAACS,OAAX,CAAmBF,KAAnB,CAA5B;AACD,CAtCM","sourcesContent":["import { StyleSheet } from \"react-native\";\n\nlet globalCache;\nconst GLOBAL_KEY = \"__global\";\nconst CONSTANTS_KEY = \"constants\";\n\nexport const clearCache = () => {\n  globalCache = Object.create(null);\n  globalCache[GLOBAL_KEY] = Object.create(null);\n};\nclearCache();\n\nconst processDefinition = definition => {\n  const constants = definition.constants;\n  if (constants) {\n    definition.constants = null;\n  }\n  const styles = StyleSheet.create(definition);\n\n  return { styles, constants };\n};\n\nexport const setInCache = (definition, namespace) => {\n  const { styles, constants } = processDefinition(definition);\n  let cache = globalCache;\n\n  if (namespace) {\n    if (!cache[namespace]) cache[namespace] = Object.create(null);\n    cache = cache[namespace];\n  } else {\n    cache = cache[GLOBAL_KEY];\n  }\n\n  // TODO: check whether using Stylesheet is more performant or not\n  Object.assign(cache, StyleSheet.create(styles));\n  Object.assign(cache, { constants });\n};\n\nexport const getFromCache = (key, namespace, definition, isConstant) => {\n  let value;\n\n  // if it's in definition\n  if (definition) {\n    let def = definition;\n\n    if (isConstant) {\n      def = def[CONSTANTS_KEY];\n    }\n\n    if (def && def[key]) return def[key];\n  }\n\n  // if it's in the namespace\n  if (namespace && globalCache[namespace]) {\n    let cache = globalCache[namespace];\n\n    if (isConstant) {\n      cache = cache[CONSTANTS_KEY];\n    }\n\n    value = cache && cache[key];\n  }\n\n  // if it's in the global cache\n  if (!value) {\n    let cache = globalCache[GLOBAL_KEY];\n\n    if (isConstant) {\n      cache = cache[CONSTANTS_KEY];\n    }\n\n    value = cache && cache[key];\n  }\n\n  // if it's a style, get native style from cached id with flatten\n  return isConstant ? value : StyleSheet.flatten(value);\n};\n"]},"metadata":{},"sourceType":"module"}